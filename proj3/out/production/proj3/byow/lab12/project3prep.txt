Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a world using rooms and hallways? 
What is the hexagon and what is the tesselation on the Project 3 side?

A:

Similar to tesselation, where certain hexagons are placed adjacent to each other, rooms and hallways must be connected/adjacent so that
every room that is generated is conneceted to hallways and not just floating in space.

-----
Q: If you were to start working on world generation, what kind of method would you think of writing first? 
Think back to the lab and the process used to eventually get to tesselating hexagons.

A:

Like generating hexagons, the first method I would try to build is one that generates rooms using random dimensions.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A:

Different: hallways are thin strips that connect to rooms that are (in at least some cases) rectangular.
Similar: rooms and hallways have randomly generated dimensions, walls that are differentiable from floors


-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way. 
After looking at your own implemention, consider the implementation provided near the end of the lab. 
How did your implementation differ from the given one? What lessons can be learned from it?

A:

The implementation ultimately comes down to the thought process of developing the algorithm. Comparing my thought process,
I ran into a corner trying to check all neighbors of a hexagon, where in the given algo, Hug describes skipping this
as he saw it being too inefficient. One lesson to be learned is knowing when to cut a design process and go back to
the drawing board rather than insist on an ineffective solution - sunk cost fallacy.

-----
Q: Consider an algorithm for placing rooms and hallways on your map. 
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task. 
In general, algorithms with as few edge cases as possible are better algorithms.

A:

some ideas include: marking tiles that connect rooms to hallways, ensuring that rooms are connected to halls and not floating.
                    getting the positions of openings of the rooms

first, I would begin by using nested loops of random, varying height and width to create rooms.
this process would allow me to insert empty tiles on the border of the room walls and every tile neighboring
an empty tile is a tile that must be connected to a hallway.
for halls, it is key that for each wall on one side, there is a parallel wall on the other side. They would start to be
develop from the source (marked room opening tiles) and turn in random directions, maybe use random iteration to decide
what direction (up, down, left, right) and for how many tiles to build.
